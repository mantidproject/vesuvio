import unittest
import numpy as np
import numpy.testing as nptest
from mock import MagicMock
from mvesuvio.analysis_reduction import VesuvioAnalysisRoutine 
from mantid.simpleapi import CreateWorkspace, DeleteWorkspace
import inspect


np.set_printoptions(suppress=True, precision=5, linewidth=200)

class TestAnalysisReduction(unittest.TestCase):
    def setUp(self):
        pass

    def test_calculate_kinematics(self):
        alg = VesuvioAnalysisRoutine()
        alg._instrument_params = np.array(
            [[3, 3, 131.12, -0.2, 11.005, 0.6039],
            [4, 4, 132.77, -0.2, 11.005, 0.5789],
            [5, 5, 133.69, -0.2, 11.005, 0.5696],
            ])
        dataX = np.array([
            [110.5, 111.5, 112.5, 113.5, 114.5],
            [110.5, 111.5, 112.5, 113.5, 114.5],
            [110.5, 111.5, 112.5, 113.5, 114.5],
        ])
        v0, E0, delta_E, delta_Q = alg._calculate_kinematics(dataX)
        np.testing.assert_allclose(v0, np.array([[0.12095, 0.11964, 0.11835, 0.11709, 0.11586],
                                       [0.11988, 0.11858, 0.11732, 0.11608, 0.11487],
                                       [0.11948, 0.1182 , 0.11694, 0.11571, 0.11451],
                                       ]), atol=1e-4)
        np.testing.assert_allclose(E0, np.array([[76475.65823, 74821.94729, 73221.30191, 71671.47572, 70170.33998],
                                       [75122.06378, 73511.83023, 71952.81999, 70442.88326, 68979.98182],
                                       [74627.68443, 73033.23536, 71489.34475, 69993.89741, 68544.88764],
                                       ]), atol=1e-4)
        np.testing.assert_allclose(delta_E, np.array([[71569.65823, 69915.94729, 68315.30191, 66765.47572, 65264.33998],
                                       [70216.06378, 68605.83023, 67046.81999, 65536.88326, 64073.98182],
                                       [69721.68443, 68127.23536, 66583.34475, 65087.89741, 63638.88764],
                                       ]), atol=1e-4)
        np.testing.assert_allclose(delta_Q, np.array([[227.01905, 224.95887, 222.94348, 220.97148, 219.04148],
                                       [226.21278, 224.18766, 222.20618, 220.26696, 218.36867],
                                       [226.07138, 224.05877, 222.08939, 220.16185, 218.27485],
                                       ]), atol=1e-4)

    def test_calculate_y_spaces(self):
        alg = VesuvioAnalysisRoutine()
        alg._masses = np.array([1, 12, 16])
        dataX = np.array([
            [110.5, 111.5, 112.5, 113.5, 114.5],
            [110.5, 111.5, 112.5, 113.5, 114.5],
            [110.5, 111.5, 112.5, 113.5, 114.5],
        ])
        delta_Q = np.array([[227.01905, 224.95887, 222.94348, 220.97148, 219.04148],
           [226.21278, 224.18766, 222.20618, 220.26696, 218.36867],
           [226.07138, 224.05877, 222.08939, 220.16185, 218.27485],
        ])
        delta_E = np.array([[71569.65823, 69915.94729, 68315.30191, 66765.47572, 65264.33998],
           [70216.06378, 68605.83023, 67046.81999, 65536.88326, 64073.98182],
           [69721.68443, 68127.23536, 66583.34475, 65087.89741, 63638.88764],
        ])
        y_spaces = alg._calculate_y_spaces(dataX, delta_Q, delta_E)
        y_spaces_expected = np.array(
            [[[-38.0885,-38.12637,-38.16414,-38.20185,-38.23948],
            [791.54274,779.75738,768.21943,756.92089,745.85436],
            [1093.22682,1077.16966,1061.44982,1046.05644,1030.97939]],

            [[-38.84807,-38.88304,-38.91795,-38.95279,-38.98756],
            [777.99344,766.43564,755.11863,744.0348,733.17695],
            [1075.02671,1059.2788,1043.8592,1028.75757,1013.96405]],

            [[-39.25409,-39.28749,-39.32085,-39.35414,-39.38735],
            [772.34348,760.87331,749.64145,738.64055,727.86342],
            [1067.46987,1051.84087,1036.53683,1021.54771,1006.8637,]]])
        np.testing.assert_allclose(y_spaces, y_spaces_expected, atol=1e-4)



if __name__ == "__main__":
    unittest.main()
