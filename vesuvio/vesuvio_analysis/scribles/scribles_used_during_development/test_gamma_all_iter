import unittest
import numpy as np
from numpy.core.fromnumeric import size
import numpy.testing as nptest
from pathlib import Path

import matplotlib.pyplot as plt
plt.style.use('dark_background')

# from jupyterthemes import jtplot
# jtplot.style()

currentPath = Path(__file__).absolute().parent  # Path to the repository
pathToOriginal = currentPath / "fixatures" / "original_adapted_run_144-182_GC.npz"
pathToOptimized = currentPath / "runs_for_testing" / "testing_gamma_correction.npz"


class TestFitParameters(unittest.TestCase):
    def setUp(self):
        originalResults = np.load(pathToOriginal)
        oriPars = originalResults["all_spec_best_par_chi_nit"]
        self.orimainPars = oriPars[:, :, 1:-2]

        optimizedResults = np.load(pathToOptimized)
        optPars = optimizedResults["all_spec_best_par_chi_nit"]
        self.optmainPars = optPars[:, :, 1:-2]

        self.rtol = 0.0001
        self.equal_nan = True

    def test_mainPars(self):
        fig, axs = plt.subplots(1 ,4, figsize=(20, 4))
        for i in range(len(self.orimainPars)):

            totalMask = np.isclose(
                self.orimainPars[i], self.optmainPars[i], rtol=self.rtol, equal_nan=self.equal_nan
                )
            totalDiffMask = ~ totalMask
            noDiff = np.sum(totalDiffMask)
            maskSize = totalDiffMask.size
            print(f"\nNo of different pars for MS iter {i}:\n",
                noDiff, " out of ", maskSize,
                f"ie {100*noDiff/maskSize:.1f} %")
            
            axs[i].imshow(totalMask, aspect="auto", cmap=plt.cm.RdYlGn, 
                        interpolation="nearest", norm=None)
            axs[i].set_title(f"Iter {i}")
            axs[i].set_xlabel("Parameters")
        axs[0].set_ylabel("Spectra")
        fig.suptitle("Comparison betwenn oriPars and optPars")
        plt.show()

class TestMeanWidthsAndIntensities(unittest.TestCase):
    def setUp(self):
        originalResults = np.load(pathToOriginal)
        self.orimeanwidths = originalResults["all_mean_widths"]
        self.orimeanintensities = originalResults["all_mean_intensities"]

        optimizedResults = np.load(pathToOptimized)
        self.optmeanwidths = optimizedResults["all_mean_widths"]
        self.optmeanintensities = optimizedResults["all_mean_intensities"]


    def test_plot(self):
        print("Starting intensity ratios:",
            "\nori: ", self.orimeanintensities[0],
            "\nopt: ", self.optmeanintensities[0])

        print("Starting widths:",
            "\nori: ", self.orimeanwidths[0],
            "\nopt: ", self.optmeanwidths[0])

        noOfMsIter = len(self.orimeanintensities)
        fig, axs = plt.subplots(2, 4, figsize=(25, 7))
        for i in range(noOfMsIter):
            x = range(noOfMsIter)
            axs[0, i].plot(x, self.orimeanintensities[:, i], label="ori")
            axs[0, i].plot(x, self.optmeanintensities[:, i], label="opt")

            axs[1, i].plot(x, self.orimeanwidths[:, i], label="ori")
            axs[1, i].plot(x, self.optmeanwidths[:, i], label="opt")
            
        axs[0, 0].set_ylabel("Intensities")
        axs[1, 0].set_ylabel("Widths")
        plt.legend()
        plt.show()


if __name__ == "__main__":
    unittest.main()